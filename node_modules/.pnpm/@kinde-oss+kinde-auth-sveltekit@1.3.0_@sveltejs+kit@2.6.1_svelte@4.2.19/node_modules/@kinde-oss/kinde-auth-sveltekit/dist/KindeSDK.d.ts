import { type SessionManager, Configuration, type ConfigurationParameters } from '@kinde-oss/kinde-typescript-sdk';
export declare const getToken: () => Promise<string>;
export declare const kindeAuthClient: {
    handleRedirectToApp: (sessionManager: SessionManager, callbackURL: URL) => Promise<void>;
    isAuthenticated: (sessionManager: SessionManager) => Promise<boolean>;
    getUserProfile: (sessionManager: SessionManager) => Promise<import("@kinde-oss/kinde-typescript-sdk").UserType>;
    createOrg: (sessionManager: SessionManager, options?: import("@kinde-oss/kinde-typescript-sdk").RegisterURLOptions | undefined) => Promise<URL>;
    getToken: (sessionManager: SessionManager) => Promise<string>;
    register: (sessionManager: SessionManager, options?: import("@kinde-oss/kinde-typescript-sdk").RegisterURLOptions | undefined) => Promise<URL>;
    getUser: (sessionManager: SessionManager) => Promise<import("@kinde-oss/kinde-typescript-sdk").UserType>;
    logout: (sessionManager: SessionManager) => Promise<URL>;
    login: (sessionManager: SessionManager, options?: import("@kinde-oss/kinde-typescript-sdk").RegisterURLOptions | undefined) => Promise<URL>;
    getUserOrganizations: (sessionManager: SessionManager) => Promise<{
        orgCodes: string[];
    }>;
    getOrganization: (sessionManager: SessionManager) => Promise<{
        orgCode: string | null;
    }>;
    getBooleanFlag: (sessionManager: SessionManager, code: string, defaultValue?: boolean | undefined) => Promise<boolean>;
    getIntegerFlag: (sessionManager: SessionManager, code: string, defaultValue?: number | undefined) => Promise<number>;
    getPermissions: (sessionManager: SessionManager) => Promise<{
        permissions: string[];
        orgCode: string | null;
    }>;
    getPermission: (sessionManager: SessionManager, name: string) => Promise<{
        orgCode: string | null;
        isGranted: boolean;
    }>;
    getClaimValue: (sessionManager: SessionManager, claim: string, type?: import("@kinde-oss/kinde-typescript-sdk").ClaimTokenType | undefined) => Promise<unknown>;
    getStringFlag: (sessionManager: SessionManager, code: string, defaultValue?: string | undefined) => Promise<string>;
    getClaim: (sessionManager: SessionManager, claim: string, type?: import("@kinde-oss/kinde-typescript-sdk").ClaimTokenType | undefined) => Promise<{
        name: string;
        value: unknown;
    }>;
    getFlag: (sessionManager: SessionManager, code: string, defaultValue?: string | number | boolean | undefined, type?: keyof import("@kinde-oss/kinde-typescript-sdk").FlagType | undefined) => Promise<import("@kinde-oss/kinde-typescript-sdk").GetFlagType>;
};
export declare const getHeaders: () => Promise<{
    Authorization: string;
    Accept: string;
}>;
export declare const getConfiguration: (configurationOverrides?: ConfigurationParameters) => Promise<Configuration>;
