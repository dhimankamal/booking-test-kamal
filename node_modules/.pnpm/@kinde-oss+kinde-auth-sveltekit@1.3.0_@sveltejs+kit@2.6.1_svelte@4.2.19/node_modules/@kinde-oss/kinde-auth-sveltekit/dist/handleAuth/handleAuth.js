import { kindeAuthClient } from '../KindeSDK.js';
import { kindeConfiguration } from '../index.js';
import { sessionStorage } from '../sessionStorage/sessionStorage.js';
import { parseSearchParamsToObject } from '../utils/index.js';
import { validateClientSecret } from '@kinde-oss/kinde-typescript-sdk';
import { error, redirect } from '@sveltejs/kit';
import { version } from '$app/environment';
const KEY_POST_LOGIN_REDIRECT_URL = 'post-login-redirect-url';
export async function handleAuth({ request, params, url: originURL }) {
    const options = parseSearchParamsToObject(originURL.search);
    let url = null;
    switch (params.kindeAuth) {
        case 'login':
            storePostLoginRedirectUrl(options);
            url = await kindeAuthClient.login(request, options);
            break;
        case 'health':
            if (!kindeConfiguration.debug) {
                url = new URL(kindeConfiguration.loginRedirectURL);
                break;
            }
            return new Response(JSON.stringify({
                authDomain: kindeConfiguration.authDomain || '',
                clientId: kindeConfiguration.clientId || '',
                logoutRedirectURL: kindeConfiguration.logoutRedirectURL || '',
                redirectURL: kindeConfiguration.redirectURL || '',
                audience: kindeConfiguration.audience || '',
                scope: kindeConfiguration.scope || '',
                // deepcode ignore HardcodedNonCryptoSecret: <this is read from env var vand validated here>
                clientSecret: validateClientSecret(kindeConfiguration.clientSecret || '')
                    ? 'Set correctly'
                    : 'Not set correctly',
                loginRedirectURL: kindeConfiguration.loginRedirectURL || '',
                authUsePKCE: kindeConfiguration.authUsePKCE,
                version: version,
                framework: 'sveltekit'
            }), {
                status: 200,
                headers: { 'Content-Type': 'application/json' }
            });
        case 'register':
            storePostLoginRedirectUrl(options);
            url = await kindeAuthClient.register(request, options);
            break;
        case 'create_org':
            url = await kindeAuthClient.createOrg(request, options);
            break;
        case 'kinde_callback':
            await kindeAuthClient.handleRedirectToApp(request, new URL(request.url));
            redirectToPostLoginUrl();
            throw redirect(302, kindeConfiguration.loginRedirectURL ?? '/');
        case 'logout':
            url = await kindeAuthClient.logout(request);
            break;
        default:
            throw error(404, 'Not Found');
    }
    throw redirect(302, url.toString());
}
const storePostLoginRedirectUrl = (options) => {
    if (options.post_login_redirect_url && typeof options.post_login_redirect_url == 'string') {
        sessionStorage.setSessionItem(KEY_POST_LOGIN_REDIRECT_URL, options.post_login_redirect_url);
    }
};
const isAbsoluteUrl = (url) => url.indexOf('http://') === 0 || url.indexOf('https://') === 0;
const redirectToPostLoginUrl = () => {
    if (sessionStorage.getSessionItem(KEY_POST_LOGIN_REDIRECT_URL)) {
        const post_login_redirect_url = sessionStorage.getSessionItem(KEY_POST_LOGIN_REDIRECT_URL);
        sessionStorage.removeSessionItem(KEY_POST_LOGIN_REDIRECT_URL);
        if (isAbsoluteUrl(post_login_redirect_url)) {
            throw redirect(302, new URL(post_login_redirect_url));
        }
        else {
            throw redirect(302, new URL(post_login_redirect_url, kindeConfiguration.appBase));
        }
    }
};
